{
  "$defs": {
    "ContainerConfig": {
      "additionalProperties": true,
      "title": "The containers should run in Pod",
      "description": "ContainerConfig defines container configuration. It similars to pod.spec.containers.",
      "properties": {
        "args": {
          "title": "The command arguments",
          "description": "Pass arguments to the container entrypoint command",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "title": "The container entrypoint command",
          "description": "Override the container entrypoint command that should start the application",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "image": {
          "title": "Container image",
          "type": "string"
        },
        "livenessProbe": {
          "$ref": "#/$defs/HealthCheckProbe",
          "title": "The livenessProbe configuration"
        },
        "name": {
          "title": "Container name",
          "description": "Defaults to `container-$index` for containers and `init-$index` for `initContainers`. Example: container-0, init-0.",
          "type": "string"
        },
        "ports": {
          "title": "Container ports",
          "items": {
            "additionalProperties": true,
            "properties": {
              "containerPort": {
                "title": "Port number exposed by the container",
                "type": "integer"
              }
            },
            "required": ["containerPort"],
            "type": "object"
          },
          "type": "array"
        },
        "readinessProbe": {
          "$ref": "#/$defs/HealthCheckProbe",
          "title": "The readinessProbe configuration"
        },
        "startupProbe": {
          "$ref": "#/$defs/HealthCheckProbe",
          "title": "The startupProbe configuration"
        },
        "volumeMounts": {
          "title": "Mounts volume into the container",
          "items": {
            "$ref": "#/$defs/VolumeMountConfig"
          },
          "type": "array"
        }
      },
      "required": ["image"],
      "type": "object"
    },
    "GlobalConfig": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Add additional annotations",
          "type": "object"
        },
        "appVersion": {
          "title": "Add application version label",
          "description": "It will add the `app.kubernetes.io/version` label for all resources",
          "type": "string"
        },
        "defaultStorageClass": {
          "title": "Default storage class",
          "description": "The default storage class will be used if storageClass didn't provide",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Add additional labels",
          "description": "It will add these labels for all resources",
          "type": "object"
        }
      },
      "type": "object"
    },
    "HealthCheckProbe": {
      "additionalProperties": true,
      "title": "Health check probe configuration",
      "description": "HealthCheckProbe is used for livenessProbe, readinessProbe and startupProbe.",
      "properties": {
        "exec": {
          "title": "The command configuration",
          "properties": {
            "command": {
              "title": "The command will be executed",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "type": "array"
            },
            "enabled": {
              "title": "Enable this probe",
              "type": "boolean"
            }
          },
          "required": ["command"],
          "type": "object"
        },
        "failureThreshold": {
          "title": "Failure threshold",
          "description": "When a probe fails, Kubernetes will try failureThreshold times before giving up",
          "minimum": 1,
          "type": "integer"
        },
        "grpc": {
          "description": "The gRPC configuration",
          "properties": {
            "enabled": {
              "title": "Enable gRPC health checking",
              "type": "boolean"
            },
            "port": {
              "title": "Port number of the gRPC service",
              "description": "Defaults to the first container port, otherwise 80",
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            },
            "service": {
              "title": "gRPC service name",
              "description": "Service is the name of the service to place in the gRPC HealthCheckRequest",
              "type": "string"
            }
          },
          "type": "object"
        },
        "httpGet": {
          "additionalProperties": true,
          "title": "HTTP GET configuration",
          "properties": {
            "enabled": {
              "title": "Enable this probe",
              "type": "boolean"
            },
            "host": {
              "title": "Host name to connect to",
              "description": "Defaults to the pod IP",
              "type": "string"
            },
            "path": {
              "title": "Path to access on the HTTP server",
              "description": "Defaults to '/'",
              "type": "string"
            },
            "port": {
              "title": "Port number to access on the HTTP server",
              "description": "Defaults to the first container port, otherwise 80",
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "initialDelaySeconds": {
          "title": "Number of delay in seconds",
          "description": "Number of seconds after the container has started before liveness or readiness probes are initiated",
          "minimum": 0,
          "type": "integer"
        },
        "periodSeconds": {
          "title": "Period in seconds",
          "description": "How often (in seconds) to perform the probe",
          "minimum": 1,
          "type": "integer"
        },
        "successThreshold": {
          "title": "Success threshold",
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed",
          "minimum": 1,
          "type": "integer"
        },
        "tcpSocket": {
          "additionalProperties": true,
          "title": "TCP socket probe configuration",
          "description": "This is the default method will be used for health checking",
          "properties": {
            "host": {
              "title": "Host name to connect to",
              "description": "Defaults to the pod IP",
              "type": "string"
            },
            "port": {
              "title": "Port number to access on the TCP server",
              "description": "Defaults to the first container port, otherwise 80",
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "timeoutSeconds": {
          "title": "Timeout in seconds",
          "description": "Number of seconds after which the probe times out",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "IngressConfig": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations to add to the ingress",
          "type": "object"
        },
        "className": {
          "description": "Ingress class name",
          "type": "string"
        },
        "enabled": {
          "description": "Enable the ingress",
          "type": "boolean"
        },
        "rules": {
          "description": "Ingress rules",
          "items": {
            "properties": {
              "host": {
                "description": "Hostname (public domain)",
                "type": "string"
              },
              "paths": {
                "description": "Paths under the hostname",
                "items": {
                  "properties": {
                    "path": {
                      "default": "/",
                      "description": "URL path",
                      "type": "string"
                    },
                    "pathType": {
                      "default": "ImplementationSpecific",
                      "description": "Path type",
                      "enum": ["ImplementationSpecific", "PathPrefix", "Exac"],
                      "type": "string"
                    },
                    "serviceName": {
                      "description": "Service name, defaults to the service generated by this chart",
                      "type": "string"
                    },
                    "servicePort": {
                      "description": "Service port, defaults to the first port of the service generated by this chart, otherwise 80",
                      "maximum": 65535,
                      "minimum": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": ["host"],
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        },
        "tls": {
          "description": "TLS configuration",
          "items": {
            "properties": {
              "hosts": {
                "description": "Hosts for TLS certificates",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "secretName": {
                "description": "Secret name for TLS certificates",
                "type": "string"
              }
            },
            "required": ["secretName"],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": ["rules"],
      "type": "object"
    },
    "RegistryConfig": {
      "description": "RegistryConfig provides the container registry credentials for pulling private images",
      "properties": {
        "email": {
          "description": "Email associated with the registry",
          "type": "string"
        },
        "password": {
          "description": "Registry password",
          "type": "string"
        },
        "server": {
          "description": "Registry server URL",
          "type": "string"
        },
        "username": {
          "description": "Registry username",
          "type": "string"
        }
      },
      "required": ["server", "username", "password"],
      "type": "object"
    },
    "ServiceAccountConfig": {
      "description": "ServiceAccountConfig defines the service account configuration",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations for the Service Account",
          "type": "object"
        },
        "automount": {
          "default": true,
          "description": "Automount the Service Account",
          "type": "boolean"
        },
        "create": {
          "default": true,
          "description": "Create the Service Account",
          "type": "boolean"
        },
        "name": {
          "description": "Service Account name, defaults to the fullname",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServiceConfig": {
      "additionalProperties": true,
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations to add to the service",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Enable the service",
          "type": "boolean"
        },
        "ports": {
          "description": "The ports that the service should expose",
          "items": {
            "additionalProperties": true,
            "properties": {
              "name": {
                "description": "Port name",
                "type": "string"
              },
              "port": {
                "description": "Port number",
                "type": "integer"
              },
              "targetPort": {
                "description": "Target port number",
                "type": "integer"
              }
            },
            "required": ["port"],
            "type": "object"
          },
          "type": "array"
        },
        "type": {
          "default": "ClusterIP",
          "description": "The type of the service (ClusterIP, NodePort, LoadBalancer, ExternalName)",
          "enum": ["ClusterIP", "NodePort", "LoadBalancer", "ExternalName"],
          "type": "string"
        }
      },
      "type": "object"
    },
    "VolumeConfig": {
      "additionalProperties": true,
      "description": "VolumeConfig defines volumes for Pods",
      "properties": {
        "configMap": {
          "additionalProperties": true,
          "description": "ConfigMap configuration",
          "properties": {
            "name": {
              "description": "ConfigMap name",
              "type": "string"
            }
          },
          "required": ["name"],
          "type": "object"
        },
        "name": {
          "description": "Volume name",
          "type": "string"
        },
        "persistentVolumeClaim": {
          "additionalProperties": true,
          "description": "PersistentVolumeClaim configuration",
          "properties": {
            "claimName": {
              "description": "Claim name",
              "type": "string"
            },
            "requests": {
              "description": "Create the PersistentVolumeClaim by adding `requests` field",
              "properties": {
                "accessModes": {
                  "description": "Access modes",
                  "items": {
                    "default": "ReadWriteOnce",
                    "enum": [
                      "ReadWriteOnce",
                      "ReadOnlyMany",
                      "ReadWriteMany",
                      "ReadWriteOncePod"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "size": {
                  "default": "1Gi",
                  "description": "Requested storage size",
                  "type": "string"
                },
                "storageClass": {
                  "description": "Storage class",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "required": ["claimName"],
          "type": "object"
        }
      },
      "required": ["name"],
      "type": "object"
    },
    "VolumeMountConfig": {
      "properties": {
        "mountPath": {
          "description": "Mount path inside the container",
          "type": "string"
        },
        "name": {
          "description": "Volume name",
          "type": "string"
        },
        "readOnly": {
          "description": "Mount as read-only",
          "type": "boolean"
        },
        "subPath": {
          "description": "Sub-path within the volume",
          "type": "string"
        }
      },
      "required": ["name", "mountPath"],
      "type": "object"
    }
  },
  "$id": "https://github.com/phe-lab/helm-charts/blob/main/charts/instant-chart/values.schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Schema for values.yaml file",
  "properties": {
    "nameOverride": {
      "title": "Override the default chart name",
      "description": "This value is used to override the default chart name used when creating resources. If you only want to change the short name of the chart without affecting the full name, you can use nameOverride.",
      "type": "string"
    },
    "fullnameOverride": {
      "title": "Override the fullname of the resources",
      "description": "This value allows you to set the fullname for the resources generated, regardless of Helm's default naming convention. This is useful when you want to ensure that the names of the resources are entirely to your liking without relying on Helm's default naming logic.",
      "type": "string"
    },
    "global": {
      "$ref": "#/$defs/GlobalConfig",
      "description": "Global config will apply for all resources generated",
      "title": "Global config"
    },
    "replicas": {
      "default": 1,
      "title": "Number of Pod replicas",
      "minimum": 0,
      "type": "integer"
    },
    "containers": {
      "title": "A list of containers belonging to the pod",
      "description": "Similars to pod.spec.containers configuration",
      "items": {
        "$ref": "#/$defs/ContainerConfig"
      },
      "type": "array"
    },
    "initContainers": {
      "title": "Additional initialization containers",
      "description": "Similars to pod.spec.initContainers configuration",
      "items": {
        "$ref": "#/$defs/ContainerConfig"
      },
      "type": "array"
    },
    "imagePatches": {
      "additionalProperties": {
        "type": "string"
      },
      "title": "Override the container images",
      "description": "Patch container images for using FluxCD Image Update Automation",
      "type": "object"
    },
    "volumes": {
      "title": "A list of volumes to be added to the pod",
      "description": "Similars to pod.spec.volumes configuration",
      "items": {
        "$ref": "#/$defs/VolumeConfig"
      },
      "type": "array"
    },
    "serviceAccount": {
      "$ref": "#/$defs/ServiceAccountConfig",
      "title": "Service Account for Pod to use",
      "description": "Defaults to 'default' ServiceAccount"
    },
    "imagePullSecrets": {
      "title": "Add external pull secrets",
      "description": "Reference to one or more secrets to be used when pulling images. The pull secret generated is added to the Pod by default.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "registryLogin": {
      "title": "Provides credentials for registry login",
      "description": "Creates a Secret to provide registry credentials for pulling private images",
      "items": {
        "$ref": "#/$defs/RegistryConfig"
      },
      "type": "array"
    },
    "service": {
      "$ref": "#/$defs/ServiceConfig",
      "title": "Service configuration",
      "description": "Similars to service.spec configuration"
    },
    "ingress": {
      "$ref": "#/$defs/IngressConfig",
      "title": "Ingress configuration"
    },
    "configMaps": {
      "additionalProperties": {
        "type": "object"
      },
      "title": "Create ConfigMaps",
      "description": "Configuration for config maps; each key is the ConfigMap name, and the value will be the ConfigMap data.",
      "type": "object"
    },
    "secrets": {
      "additionalProperties": {
        "type": "object"
      },
      "title": "Create Secrets",
      "description": "Configuration for secrets; each key is the Secret name, and the value will be the Secret data. These data are automatically encoded in base64.",
      "type": "object"
    },
    "affinity": {
      "title": "Assign custom affinity rules to the pod",
      "description": "Similars to pod.spec.affinity configuration. You can define node affinity, pod affinity and anti-affinity here.",
      "type": "object"
    },
    "nodeSelector": {
      "additionalProperties": {
        "type": "string"
      },
      "title": "Select nodes by labels",
      "description": "Define which Nodes the Pods are scheduled on",
      "type": "object"
    },
    "nodeName": {
      "title": "Assign Pods to a specific node name",
      "type": "string"
    },
    "tolerations": {
      "title": "Tolerations for use with node taints",
      "items": {
        "properties": {
          "effect": {
            "title": "Taint effect",
            "type": "string"
          },
          "key": {
            "title": "Taint key",
            "type": "string"
          },
          "operator": {
            "title": "Taint operator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "topologySpreadConstraints": {
      "title": "Topolofy spread constraints",
      "description": "Enable topology spread constraints to control how Pods are spread across your cluster among failure-domains. It similars to pod.spec.topologySpreadConstraints configuration.",
      "items": {
        "type": "object"
      },
      "type": "array"
    },
    "securityContext": {
      "title": "Pod security context",
      "description": "Define privilege and access control settings for a Pod or Container",
      "type": "object"
    },
    "dnsConfig": {
      "title": "DNS configuration for the pod",
      "description": "Similars to pod.spec.dnsConfig configuration",
      "type": "object"
    },
    "hostAliases": {
      "title": "Host aliases for the pod",
      "description": "Similars to pod.spec.hostAliases configuration",
      "items": {
        "type": "object"
      },
      "type": "array"
    },
    "overhead": {
      "title": "Overhead for the pod",
      "description": "Similars to pod.spec.overhead configuration",
      "type": "object"
    },
    "readinessGates": {
      "title": "Readiness gates for the pod",
      "description": "Similars to pod.spec.readinessGates configuration",
      "items": {
        "type": "object"
      },
      "type": "array"
    }
  },
  "type": "object"
}
